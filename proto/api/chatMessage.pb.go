// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/chatMessage.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChatMessageRequest struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatMessageRequest) Reset()         { *m = ChatMessageRequest{} }
func (m *ChatMessageRequest) String() string { return proto.CompactTextString(m) }
func (*ChatMessageRequest) ProtoMessage()    {}
func (*ChatMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffaca738ab57128c, []int{0}
}

func (m *ChatMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessageRequest.Unmarshal(m, b)
}
func (m *ChatMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessageRequest.Marshal(b, m, deterministic)
}
func (m *ChatMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessageRequest.Merge(m, src)
}
func (m *ChatMessageRequest) XXX_Size() int {
	return xxx_messageInfo_ChatMessageRequest.Size(m)
}
func (m *ChatMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessageRequest proto.InternalMessageInfo

func (m *ChatMessageRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatMessageRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ChatMessageResponse struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatMessageResponse) Reset()         { *m = ChatMessageResponse{} }
func (m *ChatMessageResponse) String() string { return proto.CompactTextString(m) }
func (*ChatMessageResponse) ProtoMessage()    {}
func (*ChatMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffaca738ab57128c, []int{1}
}

func (m *ChatMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessageResponse.Unmarshal(m, b)
}
func (m *ChatMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessageResponse.Marshal(b, m, deterministic)
}
func (m *ChatMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessageResponse.Merge(m, src)
}
func (m *ChatMessageResponse) XXX_Size() int {
	return xxx_messageInfo_ChatMessageResponse.Size(m)
}
func (m *ChatMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessageResponse proto.InternalMessageInfo

func (m *ChatMessageResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatMessageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ChatMessageRequest)(nil), "msgapi.ChatMessageRequest")
	proto.RegisterType((*ChatMessageResponse)(nil), "msgapi.ChatMessageResponse")
}

func init() { proto.RegisterFile("proto/chatMessage.proto", fileDescriptor_ffaca738ab57128c) }

var fileDescriptor_ffaca738ab57128c = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xce, 0x48, 0x2c, 0xf1, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x03, 0x8b,
	0x08, 0xb1, 0xe5, 0x16, 0xa7, 0x27, 0x16, 0x64, 0x2a, 0xb9, 0x71, 0x09, 0x39, 0x23, 0x24, 0x83,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xc4, 0xb8, 0xd8, 0x4a, 0x8b, 0x53, 0x8b, 0x3c, 0x53,
	0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0xa0, 0x3c, 0x21, 0x09, 0x2e, 0xf6, 0x5c, 0x88, 0x4a,
	0x09, 0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0xc9, 0x9d, 0x4b, 0x18, 0xc5, 0x9c, 0xe2,
	0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xd2, 0x0d, 0x32, 0x8a, 0x46, 0x71, 0x50, 0x70, 0x6a, 0x51, 0x59,
	0x66, 0x72, 0xaa, 0x90, 0x2b, 0x17, 0x0b, 0xc8, 0x0f, 0x42, 0x52, 0x7a, 0x10, 0x77, 0xeb, 0x61,
	0x3a, 0x5a, 0x4a, 0x1a, 0xab, 0x1c, 0xc4, 0x21, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x4e, 0x6c,
	0x51, 0x2c, 0xfa, 0x89, 0x05, 0x99, 0x49, 0x6c, 0xe0, 0x40, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xa9, 0xcf, 0xda, 0x8d, 0x1f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatMessageServiceClient is the client API for ChatMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatMessageServiceClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatMessageService_ChatClient, error)
}

type chatMessageServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatMessageServiceClient(cc *grpc.ClientConn) ChatMessageServiceClient {
	return &chatMessageServiceClient{cc}
}

func (c *chatMessageServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatMessageService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatMessageService_serviceDesc.Streams[0], "/msgapi.ChatMessageService/chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatMessageServiceChatClient{stream}
	return x, nil
}

type ChatMessageService_ChatClient interface {
	Send(*ChatMessageRequest) error
	Recv() (*ChatMessageResponse, error)
	grpc.ClientStream
}

type chatMessageServiceChatClient struct {
	grpc.ClientStream
}

func (x *chatMessageServiceChatClient) Send(m *ChatMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatMessageServiceChatClient) Recv() (*ChatMessageResponse, error) {
	m := new(ChatMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatMessageServiceServer is the server API for ChatMessageService service.
type ChatMessageServiceServer interface {
	Chat(ChatMessageService_ChatServer) error
}

// UnimplementedChatMessageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatMessageServiceServer struct {
}

func (*UnimplementedChatMessageServiceServer) Chat(srv ChatMessageService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

func RegisterChatMessageServiceServer(s *grpc.Server, srv ChatMessageServiceServer) {
	s.RegisterService(&_ChatMessageService_serviceDesc, srv)
}

func _ChatMessageService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatMessageServiceServer).Chat(&chatMessageServiceChatServer{stream})
}

type ChatMessageService_ChatServer interface {
	Send(*ChatMessageResponse) error
	Recv() (*ChatMessageRequest, error)
	grpc.ServerStream
}

type chatMessageServiceChatServer struct {
	grpc.ServerStream
}

func (x *chatMessageServiceChatServer) Send(m *ChatMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatMessageServiceChatServer) Recv() (*ChatMessageRequest, error) {
	m := new(ChatMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatMessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msgapi.ChatMessageService",
	HandlerType: (*ChatMessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "chat",
			Handler:       _ChatMessageService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/chatMessage.proto",
}
