// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/chatMessage.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChatMessage struct {
	SenderID             string   `protobuf:"bytes,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	ChannelName          string   `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffaca738ab57128c, []int{0}
}

func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessage.Unmarshal(m, b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return xxx_messageInfo_ChatMessage.Size(m)
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetSenderID() string {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *ChatMessage) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *ChatMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type MessageAck struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageAck) Reset()         { *m = MessageAck{} }
func (m *MessageAck) String() string { return proto.CompactTextString(m) }
func (*MessageAck) ProtoMessage()    {}
func (*MessageAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffaca738ab57128c, []int{1}
}

func (m *MessageAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageAck.Unmarshal(m, b)
}
func (m *MessageAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageAck.Marshal(b, m, deterministic)
}
func (m *MessageAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageAck.Merge(m, src)
}
func (m *MessageAck) XXX_Size() int {
	return xxx_messageInfo_MessageAck.Size(m)
}
func (m *MessageAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageAck.DiscardUnknown(m)
}

var xxx_messageInfo_MessageAck proto.InternalMessageInfo

type ConnectionRequest struct {
	UserID               string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ChannelName          string   `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectionRequest) Reset()         { *m = ConnectionRequest{} }
func (m *ConnectionRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectionRequest) ProtoMessage()    {}
func (*ConnectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffaca738ab57128c, []int{2}
}

func (m *ConnectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionRequest.Unmarshal(m, b)
}
func (m *ConnectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionRequest.Marshal(b, m, deterministic)
}
func (m *ConnectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionRequest.Merge(m, src)
}
func (m *ConnectionRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectionRequest.Size(m)
}
func (m *ConnectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionRequest proto.InternalMessageInfo

func (m *ConnectionRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ConnectionRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

type SuccessEmptyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuccessEmptyResponse) Reset()         { *m = SuccessEmptyResponse{} }
func (m *SuccessEmptyResponse) String() string { return proto.CompactTextString(m) }
func (*SuccessEmptyResponse) ProtoMessage()    {}
func (*SuccessEmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffaca738ab57128c, []int{3}
}

func (m *SuccessEmptyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuccessEmptyResponse.Unmarshal(m, b)
}
func (m *SuccessEmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuccessEmptyResponse.Marshal(b, m, deterministic)
}
func (m *SuccessEmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuccessEmptyResponse.Merge(m, src)
}
func (m *SuccessEmptyResponse) XXX_Size() int {
	return xxx_messageInfo_SuccessEmptyResponse.Size(m)
}
func (m *SuccessEmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SuccessEmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SuccessEmptyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ChatMessage)(nil), "msgapi.ChatMessage")
	proto.RegisterType((*MessageAck)(nil), "msgapi.MessageAck")
	proto.RegisterType((*ConnectionRequest)(nil), "msgapi.ConnectionRequest")
	proto.RegisterType((*SuccessEmptyResponse)(nil), "msgapi.SuccessEmptyResponse")
}

func init() { proto.RegisterFile("proto/chatMessage.proto", fileDescriptor_ffaca738ab57128c) }

var fileDescriptor_ffaca738ab57128c = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x1b, 0x40, 0x01, 0x2e, 0x2c, 0x1c, 0xa8, 0x84, 0x4c, 0x95, 0xa7, 0x4e, 0x29, 0x82,
	0x8d, 0xad, 0x04, 0x06, 0x90, 0xca, 0x90, 0x6c, 0x6c, 0xc6, 0x3d, 0xb5, 0x16, 0xc4, 0x36, 0x39,
	0x07, 0x89, 0xdf, 0xc1, 0x1f, 0x46, 0x4a, 0x9a, 0x62, 0x21, 0xa4, 0x8e, 0xef, 0x3d, 0xfb, 0x3e,
	0x3f, 0x1f, 0x5c, 0xb8, 0xc6, 0x7a, 0x3b, 0x53, 0x6b, 0xe9, 0x17, 0xc4, 0x2c, 0x57, 0x94, 0x77,
	0x0e, 0xc6, 0x35, 0xaf, 0xa4, 0xd3, 0x82, 0x20, 0x29, 0x7e, 0x43, 0xcc, 0xe0, 0x88, 0xc9, 0x2c,
	0xa9, 0x79, 0xbc, 0x4f, 0xa3, 0x49, 0x34, 0x3d, 0x2e, 0xb7, 0x1a, 0x27, 0x90, 0xa8, 0xb5, 0x34,
	0x86, 0xde, 0x9f, 0x65, 0x4d, 0xe9, 0x5e, 0x17, 0x87, 0x16, 0xa6, 0x70, 0x58, 0xf7, 0x83, 0xd2,
	0xfd, 0x2e, 0x1d, 0xa4, 0x38, 0x01, 0xd8, 0x20, 0xe6, 0xea, 0x4d, 0x2c, 0xe0, 0xb4, 0xb0, 0xc6,
	0x90, 0xf2, 0xda, 0x9a, 0x92, 0x3e, 0x5a, 0x62, 0x8f, 0x63, 0x88, 0x5b, 0x0e, 0xc0, 0x1b, 0xb5,
	0x1b, 0x2b, 0xc6, 0x70, 0x5e, 0xb5, 0x4a, 0x11, 0xf3, 0x43, 0xed, 0xfc, 0x57, 0x49, 0xec, 0xac,
	0x61, 0xba, 0xfe, 0x8e, 0x00, 0x83, 0x72, 0x15, 0x35, 0x9f, 0x5a, 0x11, 0xde, 0x42, 0x52, 0x91,
	0x59, 0x0e, 0x95, 0xcf, 0xf2, 0xfe, 0x2b, 0xf2, 0xe0, 0x68, 0x86, 0x83, 0x19, 0xbc, 0x7a, 0x34,
	0x8d, 0x70, 0x0e, 0xc9, 0x93, 0xd5, 0xa6, 0xe8, 0xe9, 0x78, 0xb9, 0xbd, 0xfb, 0xb7, 0x4e, 0xf6,
	0xdf, 0x58, 0x31, 0xba, 0x8a, 0xee, 0xe2, 0x97, 0x83, 0x99, 0x74, 0xfa, 0x35, 0xee, 0x16, 0x71,
	0xf3, 0x13, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x1e, 0x4e, 0x9b, 0xa3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatMessageServiceClient is the client API for ChatMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatMessageServiceClient interface {
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (ChatMessageService_SendMessageClient, error)
	JoinChannel(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (ChatMessageService_JoinChannelClient, error)
}

type chatMessageServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatMessageServiceClient(cc *grpc.ClientConn) ChatMessageServiceClient {
	return &chatMessageServiceClient{cc}
}

func (c *chatMessageServiceClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (ChatMessageService_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatMessageService_serviceDesc.Streams[0], "/msgapi.ChatMessageService/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatMessageServiceSendMessageClient{stream}
	return x, nil
}

type ChatMessageService_SendMessageClient interface {
	Send(*ChatMessage) error
	CloseAndRecv() (*MessageAck, error)
	grpc.ClientStream
}

type chatMessageServiceSendMessageClient struct {
	grpc.ClientStream
}

func (x *chatMessageServiceSendMessageClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatMessageServiceSendMessageClient) CloseAndRecv() (*MessageAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessageAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatMessageServiceClient) JoinChannel(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (ChatMessageService_JoinChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatMessageService_serviceDesc.Streams[1], "/msgapi.ChatMessageService/JoinChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatMessageServiceJoinChannelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatMessageService_JoinChannelClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatMessageServiceJoinChannelClient struct {
	grpc.ClientStream
}

func (x *chatMessageServiceJoinChannelClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatMessageServiceServer is the server API for ChatMessageService service.
type ChatMessageServiceServer interface {
	SendMessage(ChatMessageService_SendMessageServer) error
	JoinChannel(*ConnectionRequest, ChatMessageService_JoinChannelServer) error
}

// UnimplementedChatMessageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatMessageServiceServer struct {
}

func (*UnimplementedChatMessageServiceServer) SendMessage(srv ChatMessageService_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedChatMessageServiceServer) JoinChannel(req *ConnectionRequest, srv ChatMessageService_JoinChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}

func RegisterChatMessageServiceServer(s *grpc.Server, srv ChatMessageServiceServer) {
	s.RegisterService(&_ChatMessageService_serviceDesc, srv)
}

func _ChatMessageService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatMessageServiceServer).SendMessage(&chatMessageServiceSendMessageServer{stream})
}

type ChatMessageService_SendMessageServer interface {
	SendAndClose(*MessageAck) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type chatMessageServiceSendMessageServer struct {
	grpc.ServerStream
}

func (x *chatMessageServiceSendMessageServer) SendAndClose(m *MessageAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatMessageServiceSendMessageServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatMessageService_JoinChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatMessageServiceServer).JoinChannel(m, &chatMessageServiceJoinChannelServer{stream})
}

type ChatMessageService_JoinChannelServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type chatMessageServiceJoinChannelServer struct {
	grpc.ServerStream
}

func (x *chatMessageServiceJoinChannelServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _ChatMessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msgapi.ChatMessageService",
	HandlerType: (*ChatMessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _ChatMessageService_SendMessage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "JoinChannel",
			Handler:       _ChatMessageService_JoinChannel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/chatMessage.proto",
}
